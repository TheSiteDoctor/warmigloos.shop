@using IglooTheme.Commerce.Extensions
@using IglooTheme.Commerce.Views.Shared.Models
@using Umbraco.Cms.Core.Models
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockListItem>
@{
    var settingsPublishedModel = Model.Settings;
    var contentPublishedModel = Model.Content;
    var invokeDto = new BasketItemsInvokeDto
    {
        ContainerWidthCssClass = settingsPublishedModel?.Value<string>("containerWidth"),
        BasketEmptyText = contentPublishedModel?.Value<string>("emptyBasketText"),
        ShowReturnToStoreButtonWhenBasketEmpty = contentPublishedModel?.Value<bool>("showReturnToStoreButton") ?? false,
        BasketEmptyStoreButtonSettings = new TextButtonSettings
        {
            Colour = contentPublishedModel?.Value<string>("returnToStoreButtonColour"),
            Size = contentPublishedModel?.Value<string>("returnToStoreButtonSize"),
            Style = contentPublishedModel?.Value<string>("returnToStoreButtonStyle"),
            Text = contentPublishedModel?.Value<string>("returnToStoreButtonText")
        },
        BasketEmptyStoreButtonUrl = contentPublishedModel?.Value<Link>("returnToStoreButtonUrl")?.Url ?? "/",
        StyleVariableOverrides = settingsPublishedModel?.GenerateWidgetStyleVariables(),
        CustomCssClasses = settingsPublishedModel?.Value<List<string>>("customCssClasses"),
    };
}
<div class="basket-items-widget__container">
    @await Component.InvokeAsync("BasketItems", invokeDto)
</div>
<script>
const basketItemsInvokeModel = @Html.Raw(Json.Serialize(invokeDto));
     WidgetHelper.reRenderOnBasketEmptied("BasketItems", "basket-items-widget__container", basketItemsInvokeModel)
 </script>